install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
library(BiocManager)
clinical_file <- "TCGA.BRCA.sampleMap_BRCA_clinicalMatrix"
expression_file <- "HiSeqV2"
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(BiocManager)
library(TCGAbiolinks)
clinical_file <- "TCGA.BRCA.sampleMap_BRCA_clinicalMatrix"
expression_file <- "HiSeqV2"
clinical <- TCGAbiolinks::GDCquery_clinic(project = "TCGA-BRCA", type = "clinical")
query <- GDCquery(project = "TCGA-BRCA", data.category = "Transcriptome Profiling", data.type = "Gene Expression Quantification", workflow.type = "HTSeq - FPKM-UQ")
query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
View(clinical)
View(clinical)
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(BiocManager)
library(TCGAbiolinks)
clinical_data <- read.delim("TCGA.BRCA.sampleMap_BRCA_clinicalMatrix", stringsAsFactors = FALSE)
expression_data <- read.delim("HiSeqV2", row.names = 1, stringsAsFactors = FALSE)
remotes::install_github("QuackenbushLab/NetworkDataCompanion")
pkgbuild::check_build_tools(debug = TRUE)
install.packages("curl")
install.packages("httr")
BiocManager::install("Rhtslib", force = TRUE)
BiocManager::install(c("Rsamtools", "rtracklayer", "GenomicAlignments", "VariantAnnotation"))
BiocManager::install(c("GenomicFeatures", "bumphunter", "TCGAutils"))
BiocManager::install(c("recount3", "recount"))
remotes::install_github("QuackenbushLab/NetworkDataCompanion")
library(NetworkDataCompanion)
dim(clinical_data)
dim(expression_matrix)
dim(expression_data)
clinical_samples <- clinical_data$sampleID
expression_samples <- colnames(expression_data)
common_samples <- intersect(clinical_samples, expression_samples)
View(clinical_data)
View(expression_data)
View(clinical_data)
View(expression_data)
View(clinical_data)
View(expression_data)
View(clinical_data)
View(expression_data)
colnames(expression_samples) <- gsub("\\.", "_", colnames(expression_matrix))
colnames(expression_data) <- gsub("\\.", "_", colnames(expression_matrix))
colnames(expression_data) <- gsub("\\.", "_", colnames(expression_data))
head(colnames(expression_data))
View(clinical_data)
colnames(expression_data) <- gsub("\\_", "-", colnames(expression_data))
head(colnames(expression_data))
rm(expression_samples, common_samples)
ls()
expression_samples <- substr(colnames(expression_data), 1, 12)
common_samples <- intersect(clinical_samples, expression_samples)
pkgbuild::check_build_tools(debug = TRUE)
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
BiocManager::install("TCGAbiolinks") force = TRUE
BiocManager::install("TCGAbiolinks", force = TRUE)
install.packages("remotes")
install.packages("curl")
install.packages("httr")
BiocManager::install("Rhtslib", force = TRUE)
BiocManager::install(c("Rsamtools", "rtracklayer", "GenomicAlignments", "VariantAnnotation"))
BiocManager::install(c("Rsamtools", "rtracklayer", "GenomicAlignments", "VariantAnnotation", force = TRUE))
BiocManager::install(c("Rsamtools", "rtracklayer", "GenomicAlignments", "VariantAnnotation"), force = TRUE)
remotes::install_github("QuackenbushLab/NetworkDataCompanion")
library(NetworkDataCompanion)
library(BiocManager)
library(TCGAbiolinks)
clinical_data <- read.delim("TCGA.BRCA.sampleMap_BRCA_clinicalMatrix", stringsAsFactors = FALSE)
expression_data <- read.delim("HiSeqV2", row.names = 1, stringsAsFactors = FALSE)
View(expression_data)
expression_data_copy <- expression_data
colnames(expression_data_copy) <- gsub("\\.", "_", colnames(expression_data_copy))
View(expression_data_copy)
colnames(expression_data_copy) <- gsub("\\_", "-", colnames(expression_data_copy))
View(clinical_data)
View(expression_data_copy)
clinical_samples <- substr(clinical_data$bcr_patient_barcode, 1, 12)
expression_samples <- substr(colnames(expression_data_copy), 1, 12)
common_samples <- intersect(clinical_samples, expression_samples)
head(clinical_samples)
head(expression_samples)
length(common_samples)
library(NetworkDataCompanion)
corrected_expr <- ndc_combat(expression_matrix = as.matrix(expression_matrix[, common_samples]),batch_factor = clinical_data$tissue_source_site[match(common_samples, clinical_samples)],
mod = ~ clinical_data$paper_BRCA_Subtype_PAM50[match(common_samples, clinical_samples)]
)
devtools::install_github("author/NetworkDataCompanion")
library(NetworkDataCompanion)
corrected_expr <- ndc_combat(expression_matrix = as.matrix(expression_matrix[, common_samples]),batch_factor = clinical_data$tissue_source_site[match(common_samples, clinical_samples)],
mod = ~ clinical_data$paper_BRCA_Subtype_PAM50[match(common_samples, clinical_samples)]
)
if (!require("sva")) BiocManager::install("sva")
batch_factor <- clinical_data$tissue_source_site[match(common_samples, clinical_samples)]
mod_matrix <- model.matrix(~ clinical_data$paper_BRCA_Subtype_PAM50[match(common_samples, clinical_samples)])
colnames(clinical_data)
"paper_BRCA_Subtype_PAM50" %in% colnames(clinical_data)
unique(clinical_data$PAM50Call_RNAseq)
unique(clinical_data$PAM50_mRNA_nature2012)
unique(clinical_data$Integrated_Clusters_with_PAM50__nature2012)
valid_samples <- clinical_data$sampleID[clinical_data$PAM50_mRNA_nature2012 != ""]
common_samples <- intersect(common_samples, valid_samples)
matched_indices <- match(common_samples, clinical_data$sampleID)
mod_matrix <- model.matrix(
~ clinical_data$PAM50_mRNA_nature2012[matched_indices]
)
subtype <- clinical_data$PAM50_mRNA_nature2012[matched_indices]
unique(subtype)
pkgbuild::check_build_tools(debug = TRUE)
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
BiocManager::install("TCGAbiolinks"), force = TRUE
library("BiocManager")
library(TCGAbiolinks)
install.packages("remote")
install.packages("curl")
install.packages("httr")
BiocManager::install("Rhtslib", force = TRUE)
BiocManager::install(c("Rsamtools", "rtracklayer", "GenomicAlignments", "VariantAnnotation"))
BiocManager::install(c("Rsamtools", "rtracklayer", "GenomicAlignments", "VariantAnnotation"), force = TRUE)
BiocManager::install(c("GenomicFeatures", "bumphunter", "TCGAutils"))
BiocManager::install(c("GenomicFeatures", "bumphunter", "TCGAutils"), force = TRUE)
BiocManager::install(c("recount3", "recount"))
BiocManager::install(c("recount3", "recount"), force=TRUE)
BiocManager::install("TCGAbiolinks", force = TRUE)
library(TCGAbiolinks)
remotes::install_github("QuackenbushLab/NetworkDataCompanion")
install.packages("remote", force = TRUE)
remotes::install_github("QuackenbushLab/NetworkDataCompanion")
remotes::install_github("QuackenbushLab/NetworkDataCompanion", force = TRUE)
library(NetworkDataCompanion)
clinical <- read.delim("TCGA.BRCA.sampleMap_BRCA_clinicalMatrix",
header = TRUE,
sep = "\t",
na.strings = c("NA", "", "[Not Available]"))
expression_data <- read.delim("HiSeqV2", header = TRUE, row.names = 1, check.names = FALSE)
clinical_data_copy <- clinical_data
clinical_data_copy <- clinical
expression_data_copy <- expression_data
dim(clinical_data_copy)
dim(expression_data_copy)
clinical_samples <- clinical_data_copy$sampleID
expression_samples <- colnames(expression_data_copy)
colnames(expression_samples) <- gsub(("\\.", "-", expression_samples))
colnames(expression_samples) <- gsub("\\.", "-", colnames(expression_samples))
colnames(expression_data_copy) <- gsub("\\.", "-", colnames(expression_data_copy))
View(expression_data_copy)
rm(expression_samples)
expression_samples <- colnames(expression_data_copy)
common_samples <- intersect(clinical_samples, expression_samples)
table(clinical_data_copy$tissue_source_site)
processing_batch <- substr(colnames(expression_data_copy), 22, 25)
table(clinical_data_copy$paper_BRCA_Subtype_PAM50)  # Check class distribution
colnames(clinical_data_copy)[grep("PAM50", colnames(clinical_data_copy))]
cancer_subtype <- clinical$PAM50Call_RNAseq
table(cancer_subtype)
clinical$PAM50_mRNA_nature2012
clinical$Integrated_Clusters_with_PAM50__nature2012
table(clinical$PAM50_mRNA_nature2012, clinical$Integrated_Clusters_with_PAM50__nature2012)
table(clinical$tissue_source_site)
processing_batch <- substr(colnames(expression_data), 22, 25)
table(processing_batch)
rm(processing_batch)
processing_batch <- substr(colnames(expression_data), 6, 7)
table(processing_batch)
clinical_patients_ids <- substr(clinical$bcr_patient_barcode, 1, 12)
expression_patients_ids <- substr(colnames(expression_data_copy), 1, 12)
common_patients <- intersect(clinical_patients_ids, expression_patients_ids)
lenght(common_patients)
length(common_patients)
clinical_matched <- clinical_data_copy[match(common_patients, clinical_patients_ids)]
clinical_matched <- clinical_data_copy[match(common_patients, clinical_patient_ids),]
clinical_matched <- clinical_data_copy[match(common_patients, clinical_patient_ids)]
length(clinical_patients_ids)
length(expression_patients_ids)
length(common_patients)
head(common_patients)
clinical_matched <- clinical[clinical_patients_ids %in% common_patients, ]
clinical_matched <- clinical_matched[match(common_patients, clinical_patients_ids), ]
expression_matched <- expression_data_copy[, expression_patients_ids %in% common_patients]
expression_matched <- expression_matched[, match(common_patients, expression_patients_ids)]
View(expression_matched)
View(clinical_matched)
expression_matched <- expression_matched[, match(common_patients, substr(colnames(expression_matched), 1, 12))]
View(expression_matched)
stopifnot(nrow(clinical_matched) == 1094)
stopifnot(ncol(expression_matched) == 1094)
all(substr(colnames(expression_matched), 1, 12) == clinical_matched$bcr_patient_barcode)
View(clinical_matched)
View(clinical_matched)
all(substr(colnames(expression_matched), 1, 12) == clinical_matched$sampleID)
View(expression_matched)
View(expression_matched)
View(clinical_matched)
ncol(expression_matched) == nrow(clinical_matched)
head(substr(colnames(expression_matched), 1, 12), 5)
head(clinical_matched$sampleID, 5)
all(substr(colnames(expression_matched), 1, 12) == substr(clinical_matched$sampleID, 1, 12))
clinical_patient_ids <- substr(clinical$sampleID, 1, 12)
rm(clinical_patient_ids)
expression_patient_ids <- colnames(expression_data_copy)
rm(expression_patient_ids)
common_patients <- intersect(clinical_patient_ids, expression_patient_ids)
common_patients <- intersect(clinical_patients_ids, expression_patients_ids)
length(common_patients)
rm(expression_matched)
expression_matched <- expression_data_copy[, match(common_patients, expression_patient_ids)]
expression_matched <- expression_data_copy[, match(common_patients, expression_patients_ids)]
clinical_indices <- match(common_patients, clinical_patients_ids)
rm(clinical_matched)
clinical_matched <- clinical[clinical_indices, ]
View(clinical_matched)
rm(clinical_matched)
View(expression_matched)
clinical_matched <- clinical[clinical_indices, ]
View(clinical_matched)
all(substr(clinical_matched$sampleID, 1, 12) == colnames(expression_matched))
all(substr(clinical_matched$sampleID) == colnames(expression_matched))
all(substr(colnames(expression_matched), 1, 12) == substr(clinical_matched$sampleID, 1, 12))
batch_factor <- clinical_matched$tissue_source_site
table(batch_factor)
cancer_subtype <- clinical_matched$PAM50Call_RNAseq
table(cancer_subtype, useNA = "ifany")
library(NetworkDataCompanion)
corrected_expr <- ndc_combat(expression_matrix = as.matrix(expression_matched), batch_factor = batch_factor, mod = model.matrix(~ cancer_subtype))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sva")
library(sva)
library(sva)
corrected_expr <- ComBat(dat = as.matrix(expression_matched),
batch = batch_factor, mod = model.matrix(~ cancer_subtype))
sum(is.na(cancer_subtype))
sum(is.na(batch_factor))
non_na_idx <- !is.na(cancer_subtype)
expression_filtered <- expression_matched[, non_na_idx]
View(expression_filtered)
batch_factor_filtered <- batch_factor[non_na_idx]
cancer_subtype_filtered <- cancer_subtype[non_na_idx]
corrected_expr <- ComBat(
dat = as.matrix(expression_filtered),
batch = batch_factor_filtered,
mod = model.matrix(~ cancer_subtype_filtered)
)
final_expression_data <- t(corrected_expr)
View(final_expression_data)
missing_values_summary <- colSums(is.na(clinical_matched))
print(missing_values_summary)
na_counts <- colSums(is.na(clinical_matched))
print(na_counts)
complete_rows <- !is.na(clinical_matched$PAM50Call_RNAseq)
sum(complete_rows)
clinical_subset <- clinical_matched[, c("sampleID", "PAM50Call_RNAseq","age_at_initial_pathologic_diagnosis",                                      "pathologic_stage", "vital_status", acceptable_cols)]
non_na_idx <- !is.na(clinical_matched$PAM50Call_RNAseq)
clinical_filtered <- clinical_matched[non_na_idx, ]
print(nrow(clinical_filtered))
clinical_subset <- clinical_filtered[, c("PAM50Call_RNAseq",
"age_at_initial_pathologic_diagnosis",
"pathologic_stage",
"vital_status")]
missing_values <- colSums(is.na(clinical_subset))
View(clinical_filtered)
View(clinical_subset)
rm(clinical_subset)
clinical_subset <- clinical_filtered[, c("sampleID",  "PAM50Call_RNAseq", "age_at_initial_pathologic_diagnosis", "pathologic_stage", "vital_status")]
View(expression_filtered)
print(dim(clinical_subset))
print(table(clinical_subset$PAM50Call_RNAseq, useNA="ifany"))
View(clinical_filtered)
all(substr(rownames(final_expression_data), 1, 12) == substr(rownames(clinical_filtered), 1, 12))
head(rownames(final_expression_data))
head(rownames(clinical_filtered))
rownames(clinical_filtered) <- sampleID
colnames(clinical_filtered)
clinical_subset$tissue_source_site <- clinical_matched$tissue_source_site[non_na_idx]
clinical_subset_copy <- clinical_subset
sample_ids <- clinical_filtered$sampleID
rownames(clinical_filtered) <- sample_ids
sample_ids <- clinical_subset$sampleID
rownames(clinical_subset) <- sample_ids
clinical_subset$sampleID <- NULL
all(substr(rownames(final_expression_data), 1, 12) == substr(rownames(clinical_subset), 1, 12))
combined_data <- final_expression_data
View(combined_data)
combined_data <- as.data.frame(combined_data)
combined_data$PAM50_subtype <- clinical_subset$PAM50Call_RNAseq
View(combined_data)
combined_data$age <- clinical_subset$age_at_initial_pathologic_diagnosis
combined_data$tumor_stage <- clinical_subset$pathologic_stage
combined_data$vital_status <- clinical_subset$vital_status
combined_data$tissue_source_site <- clinical_subset$tissue_source_site
dim(combined_data)
write.csv(combined_data, "tcga_brca_for_python_svm.csv", row.names = TRUE)
history()
savehistory("~/cs_697/project data/checking data/Data cleaning process.Rhistory")
library(dplyr)
library(ggplot2)
BiocManager::install(c("DESeq2", "sva", "PCAtools"), force = TRUE)
library(DESeq2)
library(PCAtools)
plotPCA_combined <- function(combined_data, group_var = "PAM50_subtype", n_features = 1000) {
clinical_cols <- c("PAM50_subtype", "age", "tumor_stage", "vital_status", "tissue_source_site")
expr_data <- t(combined_data[, !colnames(combined_data) %in% clinical_cols])
top_genes <- names(sort(gene_vars, decreasing = TRUE)[1:n_features])
expr_filtered <- expr_data[top_genes, ]
pca_result <- prcomp(t(expr_filtered), scale = TRUE)
var_explained <- round(100 * pca_result$sdev^2/sum(pca_result$sdev^2), 1)
pc_data <- data.frame(
PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2],
Group = combined_data[[group_var]]
)
library(ggplot2)
ggplot(pc_data, aes(x = PC1, y = PC2, color = Group)) +
geom_point(alpha = 0.7, size = 2) +
stat_ellipse(level = 0.95) +
theme_minimal(base_size = 12) +
labs(
title = paste("TCGA BRCA PCA - Colored by", group_var),
x = paste0("PC1 (", var_explained[1], "% Variance)"),
y = paste0("PC2 (", var_explained[2], "% Variance)")
) +
theme(legend.position = "right")
}
plotPCA_combined(combined_data)
plotPCA_combined(combined_data, group_var = "tissue_source_site")
rm(plotPCA_combined())
rm(plotPCA_combined)
plotPCA_combined <- function(combined_data, group_var = "PAM50_subtype", n_features = 1000) {
clinical_cols <- c("PAM50_subtype", "age", "tumor_stage", "vital_status", "tissue_source_site")
expr_data <- t(combined_data[, !colnames(combined_data) %in% clinical_cols])
gene_vars <- apply(expr_data, 1, var)
top_genes <- names(sort(gene_vars, decreasing = TRUE)[1:n_features])
expr_filtered <- expr_data[top_genes, ]
pca_result <- prcomp(t(expr_filtered), scale = TRUE)
var_explained <- round(100 * pca_result$sdev^2/sum(pca_result$sdev^2), 1)
pc_data <- data.frame(
PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2],
Group = combined_data[[group_var]]
)
library(ggplot2)
ggplot(pc_data, aes(x = PC1, y = PC2, color = Group)) +
geom_point(alpha = 0.7, size = 2) +
stat_ellipse(level = 0.95) +
theme_minimal(base_size = 12) +
labs(
title = paste("TCGA BRCA PCA - Colored by", group_var),
x = paste0("PC1 (", var_explained[1], "% Variance)"),
y = paste0("PC2 (", var_explained[2], "% Variance)")
)
}
plotPCA_combined(combined_data)
plotPCA_combined(combined_data, group_var = "tissue_source_site")
plotPCA_combined(combined_data, group_var = "tumor_stage")
plotPCA_combined(combined_data, group_var = "tissue_source_site")
plotPCA_combined(combined_data)
head(combined_data$tissue_source_site)
unique(combined_data$tissue_source_site)
unique(combined_data$tumor_stage)
unique(combined_data$vital_status)
unique(combined_data$PAM50_subtype)
View(clinical)
View(expression_data)
View(final_expression_data)
View(expression_matched)
View(combined_data)
View(clinical)
View(expression_data)
View(final_expression_data)
